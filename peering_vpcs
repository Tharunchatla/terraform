provider "aws" {
    region  = "ap-south-1"
    profile = "default"
}

resource "aws_vpc" "vpc1" {
    cidr_block = "10.0.0.0/16"  
}

resource "aws_vpc" "vpc2" {
    cidr_block = "20.0.0.0/16"  
}

resource "aws_subnet" "subnet1" {
    vpc_id            = aws_vpc.vpc1.id
    cidr_block        = "10.0.1.0/24"
    availability_zone = "ap-south-1a"
}

resource "aws_subnet" "subnet2" {
    vpc_id            = aws_vpc.vpc2.id
    cidr_block        = "20.0.1.0/24"
    availability_zone = "ap-south-1b"
}

resource "aws_internet_gateway" "igw1" {
    vpc_id = aws_vpc.vpc1.id
}

resource "aws_internet_gateway" "igw2" {
    vpc_id = aws_vpc.vpc2.id
}

resource "aws_route_table" "rt1" {
    vpc_id = aws_vpc.vpc1.id

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.igw1.id 
    }
}

resource "aws_route_table" "rt2" {
    vpc_id = aws_vpc.vpc2.id

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.igw2.id 
    }
}

resource "aws_route_table_association" "a" {
    subnet_id      = aws_subnet.subnet1.id
    route_table_id = aws_route_table.rt1.id
}

resource "aws_route_table_association" "b" {
    subnet_id      = aws_subnet.subnet2.id
    route_table_id = aws_route_table.rt2.id
}

resource "aws_security_group" "sg1" {
    name        = "sg1"
    description = "Allow SSH and HTTP"
    vpc_id      = aws_vpc.vpc1.id

    ingress {
        from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

resource "aws_security_group" "sg2" {
    name        = "sg2"
    description = "Allow SSH and HTTP"
    vpc_id      = aws_vpc.vpc2.id

    ingress {
        from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

resource "aws_instance" "instance1" {
    ami                    = "ami-0c55b159cbfafe1f0"  
    instance_type          = "t2.micro"
    subnet_id              = aws_subnet.subnet1.id
    vpc_security_group_ids = [aws_security_group.sg1.id]

    tags = {
        Name = "Instance1"
    }
}

resource "aws_instance" "instance2" {
    ami                    = "ami-0c55b159cbfafe1f0"  
    instance_type          = "t2.micro"
    subnet_id              = aws_subnet.subnet2.id
    vpc_security_group_ids = [aws_security_group.sg2.id]

    tags = {
        Name = "Instance2"
    }
}


resource "aws_vpc_peering_connection" "peer" {
    vpc_id      = aws_vpc.vpc1.id
    peer_vpc_id = aws_vpc.vpc2.id
    auto_accept = true

    tags = {
        Name = "VPC1-to-VPC2"
    }
}

resource "aws_route" "vpc1_to_vpc2" {
    route_table_id            = aws_route_table.rt1.id
    destination_cidr_block    = aws_vpc.vpc2.cidr_block
    vpc_peering_connection_id = aws_vpc_peering_connection.peer.id
}


resource "aws_route" "vpc2_to_vpc1" {
    route_table_id            = aws_route_table.rt2.id
    destination_cidr_block    = aws_vpc.vpc1.cidr_block
    vpc_peering_connection_id = aws_vpc_peering_connection.peer.id
}

